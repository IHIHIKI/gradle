
/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'gradlebuild.distribution.core-api-java'
    // TODO: Apply asciidoctor in documentation plugin instead.
    id 'org.asciidoctor.convert'
    id 'gradlebuild.documentation'
    id 'org.gradle.samples' version "0.16.4"
    id 'gradlebuild.internal.java'
}

repositories { handler ->
    // TODO migrate this build script to Kotlin DSL to replace this is a simple googleApisJs()
    Plugins_extensionsKt.googleApisJs(handler)
}

configurations {
    gradleFullDocsElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "docs"))
        attributes.attribute(Attribute.of("type", String), "full-docs")
    }
    gradleGettingStartedElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "docs"))
        attributes.attribute(Attribute.of("type", String), "getting-started")
    }
}

dependencies {
    asciidoctor "org.gradle:docs-asciidoctor-extensions:0.4.0"
    // TODO: Why isn't this using the output instead?
    asciidoctor project.files("src/main/resources")

    userGuideTask 'xalan:xalan:2.7.1'
    userGuideTask 'xerces:xercesImpl:2.11.0'
    userGuideTask 'xhtmlrenderer:xhtmlrenderer:R8rc1'
    userGuideTask 'itext:itext:2.0.8'
    userGuideTask 'xslthl:xslthl:2.0.1'

    userGuideStyleSheets 'docbook:docbook-xsl:1.75.2@zip'

    jquery "jquery:jquery.min:3.4.1@js"
    jquery "com.drewwilson.code:jquery.tipTip:1.3:minified@js"

    testImplementation project(":baseServices")
    testImplementation project(":core")
    docsTestImplementation(project(":internalIntegTesting")) {
        exclude module : 'groovy-all' // otherwise we get groovy.lang.GroovyRuntimeException: Conflicting module versions. Module [groovy-all is loaded in version 2.5.10 and you are trying to load version 2.5.11
    }
    testImplementation testLibraries.jsoup
    testImplementation("org.gebish:geb-spock:2.2")
    testImplementation('org.seleniumhq.selenium:selenium-htmlunit-driver:2.42.2')
    testImplementation libraries.commons_httpclient.coordinates
    testImplementation "org.apache.httpcomponents:httpmime:${libraries.commons_httpclient.version}"
}

configurations.testImplementation {
    extendsFrom(configurations.fullGradleRuntime)
}

asciidoctorj {
    version = '1.5.8.1'
    noDefaultRepositories = true
}

gradleDocumentation {
    javadocs {
        javaApi = project.uri("https://docs.oracle.com/javase/8/docs/api")
        groovyApi = project.uri("https://docs.groovy-lang.org/docs/groovy-${groovyVersion}/html/gapi")
    }
}

tasks.named("stageDocs") {
    // Add samples to generated documentation
    from(samples.distribution.renderedDocumentation) {
        into("samples")
    }
}

tasks.withType(org.gradle.docs.samples.internal.tasks.GenerateTestSource) { t ->
    doLast {
        File f = t.outputDirectory.file("org/gradle/docs/samples/ExemplarExternalSamplesFunctionalTest.java").get().asFile
        f.text = """//CHECKSTYLE:OFF
package org.gradle.docs.samples;

import org.gradle.integtests.fixtures.FailOnDeprecationSampleModifier;
import org.gradle.integtests.fixtures.executer.MoreMemorySampleModifier;
import org.gradle.integtests.fixtures.logging.ArtifactResolutionOmittingOutputNormalizer;
import org.gradle.integtests.fixtures.logging.DependencyInsightOutputNormalizer;
import org.gradle.integtests.fixtures.logging.NativeComponentReportOutputNormalizer;
import org.gradle.integtests.fixtures.logging.SampleOutputNormalizer;
import org.gradle.integtests.fixtures.logging.PlayComponentReportOutputNormalizer;
import org.gradle.integtests.fixtures.mirror.SetMirrorsSampleModifier;
import org.gradle.samples.test.normalizer.FileSeparatorOutputNormalizer;
import org.gradle.samples.test.normalizer.JavaObjectSerializationOutputNormalizer;
import org.gradle.samples.test.normalizer.GradleOutputNormalizer;
import org.gradle.samples.test.runner.GradleSamplesRunner;
import org.gradle.samples.test.runner.SampleModifiers;
import org.gradle.samples.test.runner.SamplesOutputNormalizers;
import org.gradle.samples.test.runner.SamplesRoot;
import org.junit.runner.RunWith;

@RunWith(GradleSamplesRunner.class)
@SamplesOutputNormalizers({
    SampleOutputNormalizer.class,
    JavaObjectSerializationOutputNormalizer.class,
    FileSeparatorOutputNormalizer.class,
    GradleOutputNormalizer.class,
    ArtifactResolutionOmittingOutputNormalizer.class,
    NativeComponentReportOutputNormalizer.class,
    PlayComponentReportOutputNormalizer.class,
    DependencyInsightOutputNormalizer.class
})
@SampleModifiers({
    SetMirrorsSampleModifier.class,
    MoreMemorySampleModifier.class,
    FailOnDeprecationSampleModifier.class
})
public class ExemplarExternalSamplesFunctionalTest {}
"""
    }
}

// iterate through each snippets and record their names and locations
FileFilter directoriesOnly = { it.directory }
Map<String, File> snippets = file('src/snippets').listFiles(directoriesOnly)*.listFiles(directoriesOnly).flatten().collectEntries { File snippetDir -> [snippetId(snippetDir), snippetDir] }

String snippetId(File snippetLocation) {
    String snippetName = snippetLocation.name.tokenize("-")*.capitalize().join("")
    String categoryName = snippetLocation.parentFile.name.tokenize("-")*.capitalize().join("")
    "$categoryName$snippetName"
}

// TODO (donat) snippets should be executed on multiple platforms on CI
// TODO (donat) snippets should be executed in reasonable buckets
// TODO (donat) investigate ignored snippets
// TODO (donat) readme file should be generated for snippets
// TODO (donat) verify the content of the samples index

samples {
    templates {
        javaAndroidApplication
        springBootWebApplication
        gradlePluginInJava
        buildSrcPluginJavaModuleTransform

        javaApplication
        javaListLibrary
        javaUtilitiesLibrary
        javaApplicationAsSubproject {
            sourceDirectory = javaApplication.sourceDirectory
            target = "application"
        }
        javaListLibraryAsSubproject {
            sourceDirectory = javaListLibrary.sourceDirectory
            target = "list"
        }
        javaUtilitiesLibraryAsSubproject {
            sourceDirectory = javaUtilitiesLibrary.sourceDirectory
            target = "utilities"
        }

        groovySpockTestForListLibrary {
            target = "list"
        }
        groovySpockTestForApplication {
            target = "application"
        }
        javaJunit5TestForApplication {
            target = "application"
        }
        javaJunit5TestForListLibrary {
            target = "list"
        }
        javaJunit5IntegrationTestForApplication {
            target = "application"
        }
        javaJunit5IntegrationTestForUtilitiesLibrary {
            target = "utilities"
        }

        javaModuleInfoForListLibrary {
            target = "list"
        }
        javaModuleInfoForUtilitiesLibrary {
            target = "utilities"
        }
        javaModuleInfoForApplication {
            target = "application"
        }
        javaJunit5ModuleInfoForUtilitiesLibrary {
            target = "utilities"
        }
        javaJunit5ModuleInfoForApplication {
            target = "application"
        }

        groovyApplication
        groovyListLibrary
        groovyUtilitiesLibrary
        groovyApplicationAsSubproject {
            sourceDirectory = groovyApplication.sourceDirectory
            target = "application"
        }
        groovyListLibraryAsSubproject {
            sourceDirectory = groovyListLibrary.sourceDirectory
            target = "list"
        }
        groovyUtilitiesLibraryAsSubproject {
            sourceDirectory = groovyUtilitiesLibrary.sourceDirectory
            target = "utilities"
        }

        kotlinApplication
        kotlinListLibrary
        kotlinUtilitiesLibrary

        projectInfoPlugin

        precompiledScriptPluginGroovy {
            target = "plugin"
        }
        precompiledScriptPluginGroovyInBuildSrc {
            sourceDirectory = precompiledScriptPluginGroovy.sourceDirectory
            target = "buildSrc"
        }

        precompiledScriptPluginKotlin {
            target = "plugin"
        }
        precompiledScriptPluginKotlinInBuildSrc {
            sourceDirectory = precompiledScriptPluginKotlin.sourceDirectory
            target = "buildSrc"
        }

        precompiledScriptPluginUtils {
            target = "plugin"
        }
        precompiledScriptPluginUtilsInBuildSrc {
            sourceDirectory = precompiledScriptPluginUtils.sourceDirectory
            target = "buildSrc"
        }
    }

    // default text for snippets that don't documentation
    File defaultReadme = file('src/snippets/default-readme.adoc')

    snippets.each { String id, File location ->
        publishedSamples.create(id) {
            // set readme for snippet
            File readmeLocation = new File(location, "README.adoc")
            if (!readmeLocation.exists()) {
                readmeLocation = defaultReadme
            }

            description = "Snippet from $location.name"
            category = "Other"
            sampleDirectory = location
            readmeFile = readmeLocation
            promoted = false

            File common = new File(location, 'common')
            if (common.exists()) {
                commonContent.from(common)
            }
        }
    }

    publishedSamples {
        kotlinApplication {
            sampleDirectory = samplesRoot.dir("kotlin/application")
            description = "Build a Kotlin application."
            category = "Kotlin"
            common {
                from(templates.kotlinApplication)
                from(templates.kotlinListLibrary)
                from(templates.kotlinUtilitiesLibrary)
            }
        }
        kotlinLibrary {
            sampleDirectory = samplesRoot.dir("kotlin/library")
            description = "Build a Kotlin library."
            category = "Kotlin"
            common {
                from(templates.kotlinListLibrary)
                from(templates.kotlinUtilitiesLibrary)
            }
        }

        groovyApplication {
            sampleDirectory = samplesRoot.dir("groovy/application")
            description = "Build a Groovy application."
            category = "Groovy"
            common {
                from(templates.groovyApplication)
                from(templates.groovyListLibrary)
                from(templates.groovyUtilitiesLibrary)
            }
        }
        groovyLibrary {
            sampleDirectory = samplesRoot.dir("groovy/library")
            description = "Build a Groovy library."
            category = "Groovy"
            common {
                from(templates.groovyListLibrary)
                from(templates.groovyUtilitiesLibrary)
            }
        }
        groovyMultiProjectWithSpockTests {
            sampleDirectory = samplesRoot.dir("groovy/multi-project-with-spock-tests")
            displayName = "Testing with Spock"
            description = "Test a Groovy application and library with link:https://github.com/spockframework/spock[Spock]."
            category = "Groovy"
            common {
                from(templates.groovyApplicationAsSubproject)
                from(templates.groovyListLibraryAsSubproject)
                from(templates.groovyUtilitiesLibraryAsSubproject)
                from(templates.groovySpockTestForApplication)
                from(templates.groovySpockTestForListLibrary)
            }
        }
        groovyLibraryPublishing {
            sampleDirectory = samplesRoot.dir("groovy/library-publishing")
            description = "Publish a Groovy library to a binary repository."
            category = "Groovy"
            common {
                from(templates.groovyListLibrary)
                from(templates.groovyUtilitiesLibrary)
            }
        }

        gradlePlugin {
            sampleDirectory = samplesRoot.dir("build-organization/gradle-plugin")
            description = "Organize your build logic into a Gradle plugin written in Java."
            category = "Build organization"
            common {
                from(templates.gradlePluginInJava)
            }
        }

        precompiledScriptPlugin {
            sampleDirectory = samplesRoot.dir("build-organization/precompiled-script-plugin")
            description = "Use the Groovy or Kotlin DSL in a Gradle plugin."
            category = "Build organization"
            common {
                from(templates.precompiledScriptPluginUtils)
            }
            groovy {
                from(templates.precompiledScriptPluginGroovy)
            }
            kotlin {
                from(templates.precompiledScriptPluginKotlin)
            }
        }

        precompiledScriptPluginInBuildSrc {
            sampleDirectory = samplesRoot.dir("build-organization/multi-project-with-precompiled-script-plugins")
            displayName = "Precompiled Script Plugin in buildSrc"
            description = "Use the Groovy or Kotlin DSL in a Gradle plugin in buildSrc."
            category = "Build organization"
            common {
                from(templates.precompiledScriptPluginUtilsInBuildSrc)
            }
            groovy {
                from(templates.precompiledScriptPluginGroovyInBuildSrc)
            }
            kotlin {
                from(templates.precompiledScriptPluginKotlinInBuildSrc)
            }
        }

        jvmMultiProjectBuild {
            sampleDirectory = samplesRoot.dir("build-organization/jvm-multi-project-build")
            displayName = "Multi-project build (JVM)"
            description = "Use dependencies in a multi-project build."
            category = "Build organization"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
            }
        }

        taskWithArguments {
            sampleDirectory = samplesRoot.dir("build-organization/task-with-arguments")
            description = "Pass command-line arguments to a custom task."
            category = "Build organization"
            common {
                from(sampleDirectory.dir("common"))
            }
            // TODO (donat) sanity checks probably don't do anything for samples located one level down in the gradle/kotlin directories
        }
    }
}

// The org.gradle.samples plugin uses Exemplar to execute integration tests on the samples.
// Exemplar doesn't know about that it's running in the context of the gradle/gradle build
// so it uses the Gradle distribution from the running build. This is not correct, because
// we want to verify that the samples work with the Gradle distribution being built.
tasks.named('docsTest').configure() { task ->
    task.dependsOn(tasks.named('intTestImage'))
    // TODO we use an absolute path here which makes the task not cacheable
    task.systemProperty("integTest.gradleHomeDir", new File(project.buildDir, "integ test").absolutePath)
}

// TODO: Fix upstream plugin to disable Checkstyle checks for the generated sources
tasks.named("checkstyleDocsTest") {
    enabled = false
}

// TODO: The rich console to plain text is flaky
tasks.named("checkAsciidoctorSampleContents") {
    enabled = false
}

tasks.named("generateWrapperForSamples") {
    gradleVersion = project.version
}

// TODO add some kind of test precondition support in sample test conf
tasks.named("docsTest") {
    // Do not execute Java Module tests on JVM < 9
    if (!buildJvms.testJvm.get().javaVersion.java9Compatible) {
        filter {
            excludeTestsMatching "org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.java-modules-*.sample"
        }
    }

    filter {
        // fails on CI
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Best-practices-logic-during-configuration-dont_*.sample' // negative sanity check fails (= build succeeds) for Kotlin variant
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Scala-cross-compilation_groovy_sanityCheck.sample' // There is no java executable in /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/bin. Expression: executable.exists()
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.groovy-application_*.sample' // java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.vmplugin.v7.Java7
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.groovy-library_*.sample' // java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.vmplugin.v7.Java7
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.groovy-library_*.sample' // java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.vmplugin.v7.Java7
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.groovy-library-publishing_*.sample' // java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.vmplugin.v7.Java7
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.groovy-multi-project-with-spock-tests_*.sample' // java.lang.NoClassDefFoundError: Could not initialize class org.codehaus.groovy.vmplugin.v7.Java7
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Signing-conditional_kotlin_conditionalSigning.sample' // build.gradle.kts:1:1: Cannot access implicit script receiver class 'org.gradle.api.Project'.
        // fails locally
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Artifacts-maven_*.sample' // // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Base-custom-external-task_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Base-distribution_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Composite-builds*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Dependency-management-managing-transitive-dependencies-force-for-dependency_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Groovy-cross-compilation_*.sample'  // compilation error
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Init-scripts-custom-logger_*.sample' // seems legit: Smart cast to 'Throwable' is impossible, because 'result.failure' is a property that has open or custom getter
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Java-cross-compilation_groovy_sanityCheck.sample' // compilation error, missing compiler locally
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Java-feature-variant-incompatible-variants_*.sample' // seems legit: dependency resolution fails
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Java-feature-variant-requiring-features-external_*.sample'  // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Java-library-multiproject_*.sample' // seems legit; `mainClassName` should be placed within the application { } block
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Jvm-components-scala_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Kotlin-dsl-android-build_*.sample' // plugin [id: 'com.android.application', version: '3.2.0', apply: false] was not found: Gradle Central Plugin Repository
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Kotlin-dsl-android-single-build_*.sample' // seems legit: java.lang.NoClassDefFoundError: Could not initialize class org.jetbrains.kotlin.gradle.plugin.sources.DefaultKotlinSourceSetKt
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Kotlin-dsl-multi-project-build_*.sample'  // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Maven-migration-import-bom_*.sample' // compilation failure
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Maven-pom-generation_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Maven-quickstart_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Multiproject-flat-with-no-default-master_groovy_sanityCheck.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Multiproject-flat_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Play-*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Plugins-consuming_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Plugins-custom-plugin_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Plugins-multiproject_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Plugins-plugin-versions_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Plugins-resolution-rules_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Signing-maven_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Tasks-custom-task-using-convention_*.sample' // seems legit: Could not set unknown property 'greeting' for root project 'custom-task-using-convention' of Project.
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Tooling-api-custom-model_*.sample' // emits deprecation warning
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Tutorial-archive-content_*.sample'  // seems like a legit failure
        excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Tutorial-select-project_*.sample' // emits deprecation warning
    }
    if (!buildJvms.testJvm.get().javaVersion.java11Compatible) {
        filter {
            excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.precompiled-script-plugin*.sample' // Files.readString() is used
            excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Groovy-multiproject_groovy_sanityCheck.sample' // Gradle build daemon disappeared unexpectedly (it may have been killed or may have crashed)
        }
    }

    if (org.gradle.internal.os.OperatingSystem.current().windows) {
        filter {
            excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Build-cache-configure-built-in-caches_kotlin_buildCacheConfiguration.sample' // Gradle build daemon disappeared unexpectedly
            excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.Swift-basic-test_kotlin_applySwiftPlugin.sample' // Cannot access implicit script receiver class 'org.gradle.api.initialization.Settings'. Check your module classpath for missing or conflicting dependencies
            excludeTestsMatching 'org.gradle.docs.samples.ExemplarExternalSamplesFunctionalTest.precompiled-script-plugin-in-build-src_groovy*.sample' // com.example.LibraryPluginTest > can declare api dependencies FAILED
        }
    }
}

// Publications for the docs subproject:

configurations {
    gradleFullDocsElements {
        // TODO: This breaks the provider
        outgoing.artifact(project.gradleDocumentation.getDocumentationRenderedRoot().get().asFile) {
            builtBy 'docs'
        }
    }
    gradleGettingStartedElements {
        outgoing.artifact(file("src/docs/README"))
    }
}

tasks.named('platformTest') {
    dependsOn(tasks.named('docsTest'))
}
